name: Docker Build & Push

on:
  push:
    branches:
      - master
    paths:
      - "Dockerfile"
      - "apps/web/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/docker-build-push.yml"
  issue_comment:
    types: [created]
  workflow_dispatch: {}

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/e5vosdo-snimrod:latest

jobs:
  build:
    if: >
      github.event_name == 'push' ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, 'run docker-build') &&
        github.event.issue.pull_request != null
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: read
    steps:
      - name: Determine PR number
        if: github.event_name == 'issue_comment'
        id: get_pr_number
        run: echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', steps.get_pr_number.outputs.pr_number) || github.ref }}

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=monorepo,enable=${{ github.ref == 'refs/heads/monorepo' }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build & (conditionally) Push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            SERVICE_ACCOUNT_KEY=${{ secrets.SERVICE_ACCOUNT_KEY }}
            SERVICE_ACCOUNT_KEY_PATH=${{ secrets.SERVICE_ACCOUNT_KEY_PATH }}
            BACKUP_FOLDER_ID=${{ secrets.BACKUP_FOLDER_ID }}
            IGNORE_BUILD_ERRORS=${{ secrets.IGNORE_BUILD_ERRORS }}
            FAKE_AUTH=${{ secrets.FAKE_AUTH }}
            MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            ENCRYPTION_PASSWORD=${{ secrets.ENCRYPTION_PASSWORD }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            PUBLIC_VAPID_KEY=${{ secrets.PUBLIC_VAPID_KEY }}
            PRIVATE_VAPID_KEY=${{ secrets.PRIVATE_VAPID_KEY }}

      - name: Image digest
        if: steps.build.outputs.digest
        run: echo Digest:\ ${{ steps.build.outputs.digest }}

      - name: Logout
        if: always() && github.event_name != 'pull_request'
        run: docker logout ghcr.io
